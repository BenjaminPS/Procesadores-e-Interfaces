// PIC16F886 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1
#pragma config FOSC = HS        // Oscillator Selection bits (XT oscillator: Crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = ON       // RE3/MCLR pin function select bit (RE3/MCLR pin function is MCLR)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = ON       // Brown Out Reset Selection bits (BOR enabled)
#pragma config IESO = ON        // Internal External Switchover bit (Internal/External Switchover mode is enabled)
#pragma config FCMEN = ON       // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is enabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR21V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#define _XTAL_FREQ 16000000

void main(void) {
    TRISC &= ~0xFF; // Vuelve salida a los puertos de RC 
    //PORTC &= 0xFF; //Valor de todos los puertos RC, display anodo comun
    
    TRISB |= 0x03;//RB1 y RB0 son entradas
    ANSELH &= ~0x3F; //RB1 y RB0 configurados como digitales
    char numeros[10] = {0x88, 0xEB, 0x4C, 0x49, 0x2B, 0x19, 0x18, 0xCB, 0x08, 0x0B};
    int i=0;
    PORTC = 0xF7; //Para que empiece con el DP
    while(1){ //Para que el codigo corra repetidamente
        if(PORTBbits.RB1==0){
            while(PORTBbits.RB1==0);
            __delay_ms(10);
            PORTC = numeros[i];
            while(PORTBbits.RB1==1);
            __delay_ms(10);
            i++;
            if(i>9){
                i=9;
            }
        }
        if(PORTBbits.RB0==0){
            while(PORTBbits.RB0==0);
            __delay_ms(10);
            PORTC = numeros[i];
            while(PORTBbits.RB0==1);
            __delay_ms(10);
            i--;
            if(i<0){
                i=0;
            }
        }
    }
    return;
}
//0x88, 0xEB, 0x4C, 0x49, 0x2B, 0x19, 0x18, 0xCB, 0x08, 0x0B, 0xF7 ordenamiento ascendente para catodo comun
//0xF7, 0x0B, 0x08, 0xCB, 0x18, 0x19, 0x2B, 0x49, 0x4C, 0xEB, 0x88 ordenamineto descendente para catodo comun