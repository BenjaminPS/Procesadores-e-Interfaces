// PIC16F886 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1
#pragma config FOSC = HS        // Oscillator Selection bits (XT oscillator: Crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = ON       // RE3/MCLR pin function select bit (RE3/MCLR pin function is MCLR)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = ON       // Brown Out Reset Selection bits (BOR enabled)
#pragma config IESO = ON        // Internal External Switchover bit (Internal/External Switchover mode is enabled)
#pragma config FCMEN = ON       // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is enabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR21V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#define _XTAL_FREQ 16000000

void main(void) {
    TRISB &= ~0x1F; // iniciar en 0v o 5v
    PORTB |= 0x00;
  
    ANSELH &= ~0x1F; //vuelve entrada analogica o digital sin afectar el pin 27 y 28
    while(1){
        PORTB |= 0x01F;//Empieza p1
        __delay_ms(300);
        PORTB &= ~0x1F;
        __delay_ms(200);
        PORTB |= 0x01F;//Se repite p1
        __delay_ms(300);
        PORTB &= ~0x1F;
        __delay_ms(200);
        PORTB |= 0x01;//Empieza p2
        __delay_ms(200);
        TRISB &= ~0x1F;
        PORTB |= 0x02;
        __delay_ms(200);
        TRISB &= ~0x1F;
        PORTB |= 0x04;
        __delay_ms(200);
        TRISB &= ~0x1F;   
        PORTB |= 0x08;
        __delay_ms(200);
        TRISB &= ~0x1F;   
        PORTB |= 0x10;
        __delay_ms(200);
        TRISB &= ~0x1F;
        PORTB &= ~0x01;
        __delay_ms(200);
        PORTB &= ~0x02;
        __delay_ms(200);
        PORTB &= ~0x04;
        __delay_ms(200);
        PORTB &= ~0x08;
        __delay_ms(200);
        PORTB &= ~0x10;
        __delay_ms(200);
        PORTB |= 0x01; //se repite p2
        __delay_ms(200);
        TRISB &= ~0x1F;
        PORTB |= 0x02;
        __delay_ms(200);
        TRISB &= ~0x1F;
        PORTB |= 0x04;
        __delay_ms(200);
        TRISB &= ~0x1F;   
        PORTB |= 0x08;
        __delay_ms(200);
        TRISB &= ~0x1F;   
        PORTB |= 0x10;
        __delay_ms(200);
        TRISB &= ~0x1F;
        PORTB &= ~0x01;
        __delay_ms(200);
        PORTB &= ~0x02;
        __delay_ms(200);
        PORTB &= ~0x04;
        __delay_ms(200);
        PORTB &= ~0x08;
        __delay_ms(200);
        PORTB &= ~0x10;
        __delay_ms(200); 
        PORTB |= 0x11; //Empieza p3
        __delay_ms(200);
        TRISB &= ~0x1F;   
        PORTB |= 0x0A;
        __delay_ms(200);
        TRISB &= ~0x1F;     
        PORTB |= 0x04;
        __delay_ms(200);
        TRISB &= ~0x1F;
        PORTB &= ~0x04;
        __delay_ms(200);
        PORTB &= ~0x0A;
        __delay_ms(200);
        PORTB &= ~0x11;
        __delay_ms(200);
        PORTB |= 0x11; //Se repite p3
        __delay_ms(200);
        TRISB &= ~0x1F;   
        PORTB |= 0x0A;
        __delay_ms(200);
        TRISB &= ~0x1F;     
        PORTB |= 0x04;
        __delay_ms(200);
        TRISB &= ~0x1F;
        PORTB &= ~0x04;
        __delay_ms(200);
        PORTB &= ~0x0A;
        __delay_ms(200);
        PORTB &= ~0x11;
        __delay_ms(200);
        PORTB |= 0x11; //Se repite p3
        __delay_ms(200);
        TRISB &= ~0x1F;   
        PORTB |= 0x0A;
        __delay_ms(200);
        TRISB &= ~0x1F;     
        PORTB |= 0x04;
        __delay_ms(200);
        TRISB &= ~0x1F;
        PORTB &= ~0x04;
        __delay_ms(200);
        PORTB &= ~0x0A;
        __delay_ms(200);
        PORTB &= ~0x11;
        __delay_ms(200);
        PORTB |= 0x01; //Empieza p4
        __delay_ms(200);
        PORTB &= ~0x1F;
        PORTB |= 0x02;
        __delay_ms(200);
        PORTB &= ~0x1F;
        PORTB |= 0x04;
        __delay_ms(200);
        PORTB &= ~0x1F;
        PORTB |= 0x08;
        __delay_ms(200);
        PORTB &= ~0x1F;
        PORTB |= 0x10;
        __delay_ms(200);
        PORTB &= ~0x1F;
        __delay_ms(100); 
        PORTB |= 0x10;
        __delay_ms(200);
        PORTB &= ~0x1F;
        PORTB |= 0x08;
        __delay_ms(200);
        PORTB &= ~0x1F;
        PORTB |= 0x04;
        __delay_ms(200);
        PORTB &= ~0x1F;
        PORTB |= 0x02;
        __delay_ms(200);
        PORTB &= ~0x1F;
        PORTB |= 0x01;
        __delay_ms(200);
        PORTB &= ~0x1F;
        PORTB |= 0x01; //Se repite p4
        __delay_ms(200);
        PORTB &= ~0x1F;
        PORTB |= 0x02;
        __delay_ms(200);
        PORTB &= ~0x1F;
        PORTB |= 0x04;
        __delay_ms(200);
        PORTB &= ~0x1F;
        PORTB |= 0x08;
        __delay_ms(200);
        PORTB &= ~0x1F;
        PORTB |= 0x10;
        __delay_ms(200);
        PORTB &= ~0x1F;
        __delay_ms(100); 
        PORTB |= 0x10;
        __delay_ms(200);
        PORTB &= ~0x1F;
        PORTB |= 0x08;
        __delay_ms(200);
        PORTB &= ~0x1F;
        PORTB |= 0x04;
        __delay_ms(200);
        PORTB &= ~0x1F;
        PORTB |= 0x02;
        __delay_ms(200);
        PORTB &= ~0x1F;
        PORTB |= 0x01;
        __delay_ms(200);
        PORTB &= ~0x1F;
        PORTB &= ~0x1F; //Empieza p5
        PORTB |= 0x15;
        __delay_ms(150);
        PORTB ^= 0x1F;
        __delay_ms(150);
        PORTB &= ~0x1F; //Se repite p5
        PORTB |= 0x15;
        __delay_ms(150);
        PORTB ^= 0x1F;
        __delay_ms(150);
        PORTB &= ~0x1F; //Se repite p5
        PORTB |= 0x15;
        __delay_ms(150);
        PORTB ^= 0x1F;
        __delay_ms(150);
        
        PORTB &= ~0x1F;
        __delay_ms(300);
    }
    return;
}